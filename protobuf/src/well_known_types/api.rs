// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/protobuf/api.proto`

///  Api is a light-weight descriptor for an API Interface.
///
///  Interfaces are also described as "protocol buffer services" in some contexts,
///  such as by the "service" keyword in a .proto file, but they are different
///  from API Services, which represent a concrete implementation of an interface
///  as opposed to simply a description of methods and bindings. They are also
///  sometimes simply referred to as "APIs" in other contexts, such as the name of
///  this message itself. See https://cloud.google.com/apis/design/glossary for
///  detailed terminology.
#[derive(PartialEq,Clone,Default)]
#[cfg_attr(serde, derive(Serialize, Deserialize))]
pub struct Api {
    // message fields
    ///  The fully qualified name of this interface, including package name
    ///  followed by the interface's simple name.
    pub name: ::std::string::String,
    ///  The methods of this interface, in unspecified order.
    pub methods: ::std::vec::Vec<Method>,
    ///  Any metadata attached to the interface.
    pub options: ::std::vec::Vec<crate::well_known_types::Option>,
    ///  A version string for this interface. If specified, must have the form
    ///  `major-version.minor-version`, as in `1.10`. If the minor version is
    ///  omitted, it defaults to zero. If the entire version field is empty, the
    ///  major version is derived from the package name, as outlined below. If the
    ///  field is not empty, the version in the package name will be verified to be
    ///  consistent with what is provided here.
    ///
    ///  The versioning schema uses [semantic
    ///  versioning](http://semver.org) where the major version number
    ///  indicates a breaking change and the minor version an additive,
    ///  non-breaking change. Both version numbers are signals to users
    ///  what to expect from different versions, and should be carefully
    ///  chosen based on the product plan.
    ///
    ///  The major version is also reflected in the package name of the
    ///  interface, which must end in `v<major-version>`, as in
    ///  `google.feature.v1`. For major versions 0 and 1, the suffix can
    ///  be omitted. Zero major versions must only be used for
    ///  experimental, non-GA interfaces.
    ///
    ///
    pub version: ::std::string::String,
    ///  Source context for the protocol buffer service represented by this
    ///  message.
    pub source_context: crate::MessageField<crate::well_known_types::SourceContext>,
    ///  Included interfaces. See [Mixin][].
    pub mixins: ::std::vec::Vec<Mixin>,
    ///  The source syntax of the service.
    pub syntax: crate::ProtobufEnumOrUnknown<crate::well_known_types::Syntax>,
    // special fields
    #[cfg_attr(serde, serde(skip))]
    pub unknown_fields: crate::UnknownFields,
    #[cfg_attr(serde, serde(skip))]
    pub cached_size: crate::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a Api {
    fn default() -> &'a Api {
        <Api as crate::Message>::default_instance()
    }
}

impl Api {
    pub fn new() -> Api {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Api| { &m.name },
            |m: &mut Api| { &mut m.name },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "methods",
            |m: &Api| { &m.methods },
            |m: &mut Api| { &mut m.methods },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "options",
            |m: &Api| { &m.options },
            |m: &mut Api| { &mut m.options },
        ));
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &Api| { &m.version },
            |m: &mut Api| { &mut m.version },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, crate::well_known_types::SourceContext>(
            "source_context",
            |m: &Api| { &m.source_context },
            |m: &mut Api| { &mut m.source_context },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "mixins",
            |m: &Api| { &m.mixins },
            |m: &mut Api| { &mut m.mixins },
        ));
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "syntax",
            |m: &Api| { &m.syntax },
            |m: &mut Api| { &mut m.syntax },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<Api>(
            "Api",
            0,
            fields,
        )
    }
}

impl crate::Message for Api {
    fn is_initialized(&self) -> bool {
        for v in &self.methods {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.source_context {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.mixins {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != crate::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(crate::rt::unexpected_wire_type(wire_type));
                    }
                    self.name = is.read_string()?;
                },
                2 => {
                    crate::rt::read_repeated_message_into_vec(wire_type, is, &mut self.methods)?;
                },
                3 => {
                    crate::rt::read_repeated_message_into_vec(wire_type, is, &mut self.options)?;
                },
                4 => {
                    if wire_type != crate::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(crate::rt::unexpected_wire_type(wire_type));
                    }
                    self.version = is.read_string()?;
                },
                5 => {
                    crate::rt::read_singular_message_into_field(wire_type, is, &mut self.source_context)?;
                },
                6 => {
                    crate::rt::read_repeated_message_into_vec(wire_type, is, &mut self.mixins)?;
                },
                7 => {
                    if wire_type != crate::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(crate::rt::unexpected_wire_type(wire_type));
                    }
                    self.syntax = is.read_enum_or_unknown()?;
                },
                _ => {
                    crate::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += crate::rt::string_size(1, &self.name);
        }
        for value in &self.methods {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.options {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.version.is_empty() {
            my_size += crate::rt::string_size(4, &self.version);
        }
        if let Some(v) = self.source_context.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.mixins {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint32_size(len) + len;
        };
        if self.syntax != crate::ProtobufEnumOrUnknown::new(crate::well_known_types::Syntax::SYNTAX_PROTO2) {
            my_size += crate::rt::enum_or_unknown_size(7, self.syntax);
        }
        my_size += crate::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for v in &self.methods {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.options {
            crate::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if !self.version.is_empty() {
            os.write_string(4, &self.version)?;
        }
        if let Some(v) = self.source_context.as_ref() {
            crate::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        for v in &self.mixins {
            crate::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        if self.syntax != crate::ProtobufEnumOrUnknown::new(crate::well_known_types::Syntax::SYNTAX_PROTO2) {
            os.write_enum(7, crate::ProtobufEnumOrUnknown::value(&self.syntax))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &crate::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut crate::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> Api {
        Api::new()
    }

    fn descriptor_static() -> crate::reflect::MessageDescriptor {
        crate::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 0)
    }

    fn default_instance() -> &'static Api {
        static instance: Api = Api {
            name: ::std::string::String::new(),
            methods: ::std::vec::Vec::new(),
            options: ::std::vec::Vec::new(),
            version: ::std::string::String::new(),
            source_context: crate::MessageField::none(),
            mixins: ::std::vec::Vec::new(),
            syntax: crate::ProtobufEnumOrUnknown::from_i32(0),
            unknown_fields: crate::UnknownFields::new(),
            cached_size: crate::rt::CachedSize::new(),
        };
        &instance
    }
}

impl crate::Clear for Api {
    fn clear(&mut self) {
        self.name.clear();
        self.methods.clear();
        self.options.clear();
        self.version.clear();
        self.source_context.clear();
        self.mixins.clear();
        self.syntax = crate::ProtobufEnumOrUnknown::new(crate::well_known_types::Syntax::SYNTAX_PROTO2);
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Api {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for Api {
    type RuntimeType = crate::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

///  Method represents a method of an API interface.
#[derive(PartialEq,Clone,Default)]
#[cfg_attr(serde, derive(Serialize, Deserialize))]
pub struct Method {
    // message fields
    ///  The simple name of this method.
    pub name: ::std::string::String,
    ///  A URL of the input message type.
    pub request_type_url: ::std::string::String,
    ///  If true, the request is streamed.
    pub request_streaming: bool,
    ///  The URL of the output message type.
    pub response_type_url: ::std::string::String,
    ///  If true, the response is streamed.
    pub response_streaming: bool,
    ///  Any metadata attached to the method.
    pub options: ::std::vec::Vec<crate::well_known_types::Option>,
    ///  The source syntax of this method.
    pub syntax: crate::ProtobufEnumOrUnknown<crate::well_known_types::Syntax>,
    // special fields
    #[cfg_attr(serde, serde(skip))]
    pub unknown_fields: crate::UnknownFields,
    #[cfg_attr(serde, serde(skip))]
    pub cached_size: crate::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a Method {
    fn default() -> &'a Method {
        <Method as crate::Message>::default_instance()
    }
}

impl Method {
    pub fn new() -> Method {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Method| { &m.name },
            |m: &mut Method| { &mut m.name },
        ));
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "request_type_url",
            |m: &Method| { &m.request_type_url },
            |m: &mut Method| { &mut m.request_type_url },
        ));
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "request_streaming",
            |m: &Method| { &m.request_streaming },
            |m: &mut Method| { &mut m.request_streaming },
        ));
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "response_type_url",
            |m: &Method| { &m.response_type_url },
            |m: &mut Method| { &mut m.response_type_url },
        ));
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "response_streaming",
            |m: &Method| { &m.response_streaming },
            |m: &mut Method| { &mut m.response_streaming },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "options",
            |m: &Method| { &m.options },
            |m: &mut Method| { &mut m.options },
        ));
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "syntax",
            |m: &Method| { &m.syntax },
            |m: &mut Method| { &mut m.syntax },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<Method>(
            "Method",
            1,
            fields,
        )
    }
}

impl crate::Message for Method {
    fn is_initialized(&self) -> bool {
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != crate::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(crate::rt::unexpected_wire_type(wire_type));
                    }
                    self.name = is.read_string()?;
                },
                2 => {
                    if wire_type != crate::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(crate::rt::unexpected_wire_type(wire_type));
                    }
                    self.request_type_url = is.read_string()?;
                },
                3 => {
                    if wire_type != crate::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(crate::rt::unexpected_wire_type(wire_type));
                    }
                    self.request_streaming = is.read_bool()?;
                },
                4 => {
                    if wire_type != crate::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(crate::rt::unexpected_wire_type(wire_type));
                    }
                    self.response_type_url = is.read_string()?;
                },
                5 => {
                    if wire_type != crate::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(crate::rt::unexpected_wire_type(wire_type));
                    }
                    self.response_streaming = is.read_bool()?;
                },
                6 => {
                    crate::rt::read_repeated_message_into_vec(wire_type, is, &mut self.options)?;
                },
                7 => {
                    if wire_type != crate::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(crate::rt::unexpected_wire_type(wire_type));
                    }
                    self.syntax = is.read_enum_or_unknown()?;
                },
                _ => {
                    crate::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += crate::rt::string_size(1, &self.name);
        }
        if !self.request_type_url.is_empty() {
            my_size += crate::rt::string_size(2, &self.request_type_url);
        }
        if self.request_streaming != false {
            my_size += 2;
        }
        if !self.response_type_url.is_empty() {
            my_size += crate::rt::string_size(4, &self.response_type_url);
        }
        if self.response_streaming != false {
            my_size += 2;
        }
        for value in &self.options {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint32_size(len) + len;
        };
        if self.syntax != crate::ProtobufEnumOrUnknown::new(crate::well_known_types::Syntax::SYNTAX_PROTO2) {
            my_size += crate::rt::enum_or_unknown_size(7, self.syntax);
        }
        my_size += crate::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.request_type_url.is_empty() {
            os.write_string(2, &self.request_type_url)?;
        }
        if self.request_streaming != false {
            os.write_bool(3, self.request_streaming)?;
        }
        if !self.response_type_url.is_empty() {
            os.write_string(4, &self.response_type_url)?;
        }
        if self.response_streaming != false {
            os.write_bool(5, self.response_streaming)?;
        }
        for v in &self.options {
            crate::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        if self.syntax != crate::ProtobufEnumOrUnknown::new(crate::well_known_types::Syntax::SYNTAX_PROTO2) {
            os.write_enum(7, crate::ProtobufEnumOrUnknown::value(&self.syntax))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &crate::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut crate::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> Method {
        Method::new()
    }

    fn descriptor_static() -> crate::reflect::MessageDescriptor {
        crate::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 1)
    }

    fn default_instance() -> &'static Method {
        static instance: Method = Method {
            name: ::std::string::String::new(),
            request_type_url: ::std::string::String::new(),
            request_streaming: false,
            response_type_url: ::std::string::String::new(),
            response_streaming: false,
            options: ::std::vec::Vec::new(),
            syntax: crate::ProtobufEnumOrUnknown::from_i32(0),
            unknown_fields: crate::UnknownFields::new(),
            cached_size: crate::rt::CachedSize::new(),
        };
        &instance
    }
}

impl crate::Clear for Method {
    fn clear(&mut self) {
        self.name.clear();
        self.request_type_url.clear();
        self.request_streaming = false;
        self.response_type_url.clear();
        self.response_streaming = false;
        self.options.clear();
        self.syntax = crate::ProtobufEnumOrUnknown::new(crate::well_known_types::Syntax::SYNTAX_PROTO2);
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Method {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for Method {
    type RuntimeType = crate::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(serde, derive(Serialize, Deserialize))]
pub struct Mixin {
    // message fields
    ///  The fully qualified name of the interface which is included.
    pub name: ::std::string::String,
    ///  If non-empty specifies a path under which inherited HTTP paths
    ///  are rooted.
    pub root: ::std::string::String,
    // special fields
    #[cfg_attr(serde, serde(skip))]
    pub unknown_fields: crate::UnknownFields,
    #[cfg_attr(serde, serde(skip))]
    pub cached_size: crate::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a Mixin {
    fn default() -> &'a Mixin {
        <Mixin as crate::Message>::default_instance()
    }
}

impl Mixin {
    pub fn new() -> Mixin {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Mixin| { &m.name },
            |m: &mut Mixin| { &mut m.name },
        ));
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "root",
            |m: &Mixin| { &m.root },
            |m: &mut Mixin| { &mut m.root },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<Mixin>(
            "Mixin",
            2,
            fields,
        )
    }
}

impl crate::Message for Mixin {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != crate::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(crate::rt::unexpected_wire_type(wire_type));
                    }
                    self.name = is.read_string()?;
                },
                2 => {
                    if wire_type != crate::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(crate::rt::unexpected_wire_type(wire_type));
                    }
                    self.root = is.read_string()?;
                },
                _ => {
                    crate::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += crate::rt::string_size(1, &self.name);
        }
        if !self.root.is_empty() {
            my_size += crate::rt::string_size(2, &self.root);
        }
        my_size += crate::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.root.is_empty() {
            os.write_string(2, &self.root)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &crate::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut crate::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> Mixin {
        Mixin::new()
    }

    fn descriptor_static() -> crate::reflect::MessageDescriptor {
        crate::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 2)
    }

    fn default_instance() -> &'static Mixin {
        static instance: Mixin = Mixin {
            name: ::std::string::String::new(),
            root: ::std::string::String::new(),
            unknown_fields: crate::UnknownFields::new(),
            cached_size: crate::rt::CachedSize::new(),
        };
        &instance
    }
}

impl crate::Clear for Mixin {
    fn clear(&mut self) {
        self.name.clear();
        self.root.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Mixin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for Mixin {
    type RuntimeType = crate::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19google/protobuf/api.proto\x12\x0fgoogle.protobuf\x1a$google/protob\
    uf/source_context.proto\x1a\x1agoogle/protobuf/type.proto\"\xc1\x02\n\
    \x03Api\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x121\n\x07methods\
    \x18\x02\x20\x03(\x0b2\x17.google.protobuf.MethodR\x07methods\x121\n\x07\
    options\x18\x03\x20\x03(\x0b2\x17.google.protobuf.OptionR\x07options\x12\
    \x18\n\x07version\x18\x04\x20\x01(\tR\x07version\x12E\n\x0esource_contex\
    t\x18\x05\x20\x01(\x0b2\x1e.google.protobuf.SourceContextR\rsourceContex\
    t\x12.\n\x06mixins\x18\x06\x20\x03(\x0b2\x16.google.protobuf.MixinR\x06m\
    ixins\x12/\n\x06syntax\x18\x07\x20\x01(\x0e2\x17.google.protobuf.SyntaxR\
    \x06syntax\"\xb2\x02\n\x06Method\x12\x12\n\x04name\x18\x01\x20\x01(\tR\
    \x04name\x12(\n\x10request_type_url\x18\x02\x20\x01(\tR\x0erequestTypeUr\
    l\x12+\n\x11request_streaming\x18\x03\x20\x01(\x08R\x10requestStreaming\
    \x12*\n\x11response_type_url\x18\x04\x20\x01(\tR\x0fresponseTypeUrl\x12-\
    \n\x12response_streaming\x18\x05\x20\x01(\x08R\x11responseStreaming\x121\
    \n\x07options\x18\x06\x20\x03(\x0b2\x17.google.protobuf.OptionR\x07optio\
    ns\x12/\n\x06syntax\x18\x07\x20\x01(\x0e2\x17.google.protobuf.SyntaxR\
    \x06syntax\"/\n\x05Mixin\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\
    \x12\x12\n\x04root\x18\x02\x20\x01(\tR\x04rootBu\n\x13com.google.protobu\
    fB\x08ApiProtoP\x01Z+google.golang.org/genproto/protobuf/api;api\xa2\x02\
    \x03GPB\xaa\x02\x1eGoogle.Protobuf.WellKnownTypesJ\x80<\n\x07\x12\x05\
    \x1e\0\xd1\x01\x01\n\xcc\x0c\n\x01\x0c\x12\x03\x1e\0\x122\xc1\x0c\x20Pro\
    tocol\x20Buffers\x20-\x20Google's\x20data\x20interchange\x20format\n\x20\
    Copyright\x202008\x20Google\x20Inc.\x20\x20All\x20rights\x20reserved.\n\
    \x20https://developers.google.com/protocol-buffers/\n\n\x20Redistributio\
    n\x20and\x20use\x20in\x20source\x20and\x20binary\x20forms,\x20with\x20or\
    \x20without\n\x20modification,\x20are\x20permitted\x20provided\x20that\
    \x20the\x20following\x20conditions\x20are\n\x20met:\n\n\x20\x20\x20\x20\
    \x20*\x20Redistributions\x20of\x20source\x20code\x20must\x20retain\x20th\
    e\x20above\x20copyright\n\x20notice,\x20this\x20list\x20of\x20conditions\
    \x20and\x20the\x20following\x20disclaimer.\n\x20\x20\x20\x20\x20*\x20Red\
    istributions\x20in\x20binary\x20form\x20must\x20reproduce\x20the\x20abov\
    e\n\x20copyright\x20notice,\x20this\x20list\x20of\x20conditions\x20and\
    \x20the\x20following\x20disclaimer\n\x20in\x20the\x20documentation\x20an\
    d/or\x20other\x20materials\x20provided\x20with\x20the\n\x20distribution.\
    \n\x20\x20\x20\x20\x20*\x20Neither\x20the\x20name\x20of\x20Google\x20Inc\
    .\x20nor\x20the\x20names\x20of\x20its\n\x20contributors\x20may\x20be\x20\
    used\x20to\x20endorse\x20or\x20promote\x20products\x20derived\x20from\n\
    \x20this\x20software\x20without\x20specific\x20prior\x20written\x20permi\
    ssion.\n\n\x20THIS\x20SOFTWARE\x20IS\x20PROVIDED\x20BY\x20THE\x20COPYRIG\
    HT\x20HOLDERS\x20AND\x20CONTRIBUTORS\n\x20\"AS\x20IS\"\x20AND\x20ANY\x20\
    EXPRESS\x20OR\x20IMPLIED\x20WARRANTIES,\x20INCLUDING,\x20BUT\x20NOT\n\
    \x20LIMITED\x20TO,\x20THE\x20IMPLIED\x20WARRANTIES\x20OF\x20MERCHANTABIL\
    ITY\x20AND\x20FITNESS\x20FOR\n\x20A\x20PARTICULAR\x20PURPOSE\x20ARE\x20D\
    ISCLAIMED.\x20IN\x20NO\x20EVENT\x20SHALL\x20THE\x20COPYRIGHT\n\x20OWNER\
    \x20OR\x20CONTRIBUTORS\x20BE\x20LIABLE\x20FOR\x20ANY\x20DIRECT,\x20INDIR\
    ECT,\x20INCIDENTAL,\n\x20SPECIAL,\x20EXEMPLARY,\x20OR\x20CONSEQUENTIAL\
    \x20DAMAGES\x20(INCLUDING,\x20BUT\x20NOT\n\x20LIMITED\x20TO,\x20PROCUREM\
    ENT\x20OF\x20SUBSTITUTE\x20GOODS\x20OR\x20SERVICES;\x20LOSS\x20OF\x20USE\
    ,\n\x20DATA,\x20OR\x20PROFITS;\x20OR\x20BUSINESS\x20INTERRUPTION)\x20HOW\
    EVER\x20CAUSED\x20AND\x20ON\x20ANY\n\x20THEORY\x20OF\x20LIABILITY,\x20WH\
    ETHER\x20IN\x20CONTRACT,\x20STRICT\x20LIABILITY,\x20OR\x20TORT\n\x20(INC\
    LUDING\x20NEGLIGENCE\x20OR\x20OTHERWISE)\x20ARISING\x20IN\x20ANY\x20WAY\
    \x20OUT\x20OF\x20THE\x20USE\n\x20OF\x20THIS\x20SOFTWARE,\x20EVEN\x20IF\
    \x20ADVISED\x20OF\x20THE\x20POSSIBILITY\x20OF\x20SUCH\x20DAMAGE.\n\n\x08\
    \n\x01\x02\x12\x03\x20\0\x18\n\t\n\x02\x03\0\x12\x03\"\0.\n\t\n\x02\x03\
    \x01\x12\x03#\0$\n\x08\n\x01\x08\x12\x03%\0;\n\t\n\x02\x08%\x12\x03%\0;\
    \n\x08\n\x01\x08\x12\x03&\0,\n\t\n\x02\x08\x01\x12\x03&\0,\n\x08\n\x01\
    \x08\x12\x03'\0)\n\t\n\x02\x08\x08\x12\x03'\0)\n\x08\n\x01\x08\x12\x03(\
    \0\"\n\t\n\x02\x08\n\x12\x03(\0\"\n\x08\n\x01\x08\x12\x03)\0!\n\t\n\x02\
    \x08$\x12\x03)\0!\n\x08\n\x01\x08\x12\x03*\0B\n\t\n\x02\x08\x0b\x12\x03*\
    \0B\n\xab\x04\n\x02\x04\0\x12\x045\0a\x01\x1a\x9e\x04\x20Api\x20is\x20a\
    \x20light-weight\x20descriptor\x20for\x20an\x20API\x20Interface.\n\n\x20\
    Interfaces\x20are\x20also\x20described\x20as\x20\"protocol\x20buffer\x20\
    services\"\x20in\x20some\x20contexts,\n\x20such\x20as\x20by\x20the\x20\"\
    service\"\x20keyword\x20in\x20a\x20.proto\x20file,\x20but\x20they\x20are\
    \x20different\n\x20from\x20API\x20Services,\x20which\x20represent\x20a\
    \x20concrete\x20implementation\x20of\x20an\x20interface\n\x20as\x20oppos\
    ed\x20to\x20simply\x20a\x20description\x20of\x20methods\x20and\x20bindin\
    gs.\x20They\x20are\x20also\n\x20sometimes\x20simply\x20referred\x20to\
    \x20as\x20\"APIs\"\x20in\x20other\x20contexts,\x20such\x20as\x20the\x20n\
    ame\x20of\n\x20this\x20message\x20itself.\x20See\x20https://cloud.google\
    .com/apis/design/glossary\x20for\n\x20detailed\x20terminology.\n\n\n\n\
    \x03\x04\0\x01\x12\x035\x08\x0b\n{\n\x04\x04\0\x02\0\x12\x039\x02\x12\
    \x1an\x20The\x20fully\x20qualified\x20name\x20of\x20this\x20interface,\
    \x20including\x20package\x20name\n\x20followed\x20by\x20the\x20interface\
    's\x20simple\x20name.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x039\x02\x08\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x039\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x039\x10\x11\nC\n\x04\x04\0\x02\x01\x12\x03<\x02\x1e\x1a6\x20The\x20met\
    hods\x20of\x20this\x20interface,\x20in\x20unspecified\x20order.\n\n\x0c\
    \n\x05\x04\0\x02\x01\x04\x12\x03<\x02\n\n\x0c\n\x05\x04\0\x02\x01\x06\
    \x12\x03<\x0b\x11\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03<\x12\x19\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03<\x1c\x1d\n6\n\x04\x04\0\x02\x02\x12\x03?\
    \x02\x1e\x1a)\x20Any\x20metadata\x20attached\x20to\x20the\x20interface.\
    \n\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03?\x02\n\n\x0c\n\x05\x04\0\x02\
    \x02\x06\x12\x03?\x0b\x11\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03?\x12\x19\
    \n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03?\x1c\x1d\n\x82\x08\n\x04\x04\0\
    \x02\x03\x12\x03V\x02\x15\x1a\xf4\x07\x20A\x20version\x20string\x20for\
    \x20this\x20interface.\x20If\x20specified,\x20must\x20have\x20the\x20for\
    m\n\x20`major-version.minor-version`,\x20as\x20in\x20`1.10`.\x20If\x20th\
    e\x20minor\x20version\x20is\n\x20omitted,\x20it\x20defaults\x20to\x20zer\
    o.\x20If\x20the\x20entire\x20version\x20field\x20is\x20empty,\x20the\n\
    \x20major\x20version\x20is\x20derived\x20from\x20the\x20package\x20name,\
    \x20as\x20outlined\x20below.\x20If\x20the\n\x20field\x20is\x20not\x20emp\
    ty,\x20the\x20version\x20in\x20the\x20package\x20name\x20will\x20be\x20v\
    erified\x20to\x20be\n\x20consistent\x20with\x20what\x20is\x20provided\
    \x20here.\n\n\x20The\x20versioning\x20schema\x20uses\x20[semantic\n\x20v\
    ersioning](http://semver.org)\x20where\x20the\x20major\x20version\x20num\
    ber\n\x20indicates\x20a\x20breaking\x20change\x20and\x20the\x20minor\x20\
    version\x20an\x20additive,\n\x20non-breaking\x20change.\x20Both\x20versi\
    on\x20numbers\x20are\x20signals\x20to\x20users\n\x20what\x20to\x20expect\
    \x20from\x20different\x20versions,\x20and\x20should\x20be\x20carefully\n\
    \x20chosen\x20based\x20on\x20the\x20product\x20plan.\n\n\x20The\x20major\
    \x20version\x20is\x20also\x20reflected\x20in\x20the\x20package\x20name\
    \x20of\x20the\n\x20interface,\x20which\x20must\x20end\x20in\x20`v<major-\
    version>`,\x20as\x20in\n\x20`google.feature.v1`.\x20For\x20major\x20vers\
    ions\x200\x20and\x201,\x20the\x20suffix\x20can\n\x20be\x20omitted.\x20Ze\
    ro\x20major\x20versions\x20must\x20only\x20be\x20used\x20for\n\x20experi\
    mental,\x20non-GA\x20interfaces.\n\n\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\
    \x03V\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03V\t\x10\n\x0c\n\x05\
    \x04\0\x02\x03\x03\x12\x03V\x13\x14\n[\n\x04\x04\0\x02\x04\x12\x03Z\x02#\
    \x1aN\x20Source\x20context\x20for\x20the\x20protocol\x20buffer\x20servic\
    e\x20represented\x20by\x20this\n\x20message.\n\n\x0c\n\x05\x04\0\x02\x04\
    \x06\x12\x03Z\x02\x0f\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03Z\x10\x1e\n\
    \x0c\n\x05\x04\0\x02\x04\x03\x12\x03Z!\"\n2\n\x04\x04\0\x02\x05\x12\x03]\
    \x02\x1c\x1a%\x20Included\x20interfaces.\x20See\x20[Mixin][].\n\n\x0c\n\
    \x05\x04\0\x02\x05\x04\x12\x03]\x02\n\n\x0c\n\x05\x04\0\x02\x05\x06\x12\
    \x03]\x0b\x10\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03]\x11\x17\n\x0c\n\x05\
    \x04\0\x02\x05\x03\x12\x03]\x1a\x1b\n0\n\x04\x04\0\x02\x06\x12\x03`\x02\
    \x14\x1a#\x20The\x20source\x20syntax\x20of\x20the\x20service.\n\n\x0c\n\
    \x05\x04\0\x02\x06\x06\x12\x03`\x02\x08\n\x0c\n\x05\x04\0\x02\x06\x01\
    \x12\x03`\t\x0f\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03`\x12\x13\n=\n\x02\
    \x04\x01\x12\x04d\0z\x01\x1a1\x20Method\x20represents\x20a\x20method\x20\
    of\x20an\x20API\x20interface.\n\n\n\n\x03\x04\x01\x01\x12\x03d\x08\x0e\n\
    .\n\x04\x04\x01\x02\0\x12\x03g\x02\x12\x1a!\x20The\x20simple\x20name\x20\
    of\x20this\x20method.\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03g\x02\x08\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03g\t\r\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03g\x10\x11\n/\n\x04\x04\x01\x02\x01\x12\x03j\x02\x1e\x1a\"\x20A\
    \x20URL\x20of\x20the\x20input\x20message\x20type.\n\n\x0c\n\x05\x04\x01\
    \x02\x01\x05\x12\x03j\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03j\t\
    \x19\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03j\x1c\x1d\n0\n\x04\x04\x01\
    \x02\x02\x12\x03m\x02\x1d\x1a#\x20If\x20true,\x20the\x20request\x20is\
    \x20streamed.\n\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03m\x02\x06\n\x0c\n\
    \x05\x04\x01\x02\x02\x01\x12\x03m\x07\x18\n\x0c\n\x05\x04\x01\x02\x02\
    \x03\x12\x03m\x1b\x1c\n2\n\x04\x04\x01\x02\x03\x12\x03p\x02\x1f\x1a%\x20\
    The\x20URL\x20of\x20the\x20output\x20message\x20type.\n\n\x0c\n\x05\x04\
    \x01\x02\x03\x05\x12\x03p\x02\x08\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\
    \x03p\t\x1a\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03p\x1d\x1e\n1\n\x04\
    \x04\x01\x02\x04\x12\x03s\x02\x1e\x1a$\x20If\x20true,\x20the\x20response\
    \x20is\x20streamed.\n\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03s\x02\x06\n\
    \x0c\n\x05\x04\x01\x02\x04\x01\x12\x03s\x07\x19\n\x0c\n\x05\x04\x01\x02\
    \x04\x03\x12\x03s\x1c\x1d\n3\n\x04\x04\x01\x02\x05\x12\x03v\x02\x1e\x1a&\
    \x20Any\x20metadata\x20attached\x20to\x20the\x20method.\n\n\x0c\n\x05\
    \x04\x01\x02\x05\x04\x12\x03v\x02\n\n\x0c\n\x05\x04\x01\x02\x05\x06\x12\
    \x03v\x0b\x11\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03v\x12\x19\n\x0c\n\
    \x05\x04\x01\x02\x05\x03\x12\x03v\x1c\x1d\n0\n\x04\x04\x01\x02\x06\x12\
    \x03y\x02\x14\x1a#\x20The\x20source\x20syntax\x20of\x20this\x20method.\n\
    \n\x0c\n\x05\x04\x01\x02\x06\x06\x12\x03y\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\x06\x01\x12\x03y\t\x0f\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x03y\x12\
    \x13\n\xc9\x13\n\x02\x04\x02\x12\x06\xca\x01\0\xd1\x01\x01\x1a\xba\x13\
    \x20Declares\x20an\x20API\x20Interface\x20to\x20be\x20included\x20in\x20\
    this\x20interface.\x20The\x20including\n\x20interface\x20must\x20redecla\
    re\x20all\x20the\x20methods\x20from\x20the\x20included\x20interface,\x20\
    but\n\x20documentation\x20and\x20options\x20are\x20inherited\x20as\x20fo\
    llows:\n\n\x20-\x20If\x20after\x20comment\x20and\x20whitespace\x20stripp\
    ing,\x20the\x20documentation\n\x20\x20\x20string\x20of\x20the\x20redecla\
    red\x20method\x20is\x20empty,\x20it\x20will\x20be\x20inherited\n\x20\x20\
    \x20from\x20the\x20original\x20method.\n\n\x20-\x20Each\x20annotation\
    \x20belonging\x20to\x20the\x20service\x20config\x20(http,\n\x20\x20\x20v\
    isibility)\x20which\x20is\x20not\x20set\x20in\x20the\x20redeclared\x20me\
    thod\x20will\x20be\n\x20\x20\x20inherited.\n\n\x20-\x20If\x20an\x20http\
    \x20annotation\x20is\x20inherited,\x20the\x20path\x20pattern\x20will\x20\
    be\n\x20\x20\x20modified\x20as\x20follows.\x20Any\x20version\x20prefix\
    \x20will\x20be\x20replaced\x20by\x20the\n\x20\x20\x20version\x20of\x20th\
    e\x20including\x20interface\x20plus\x20the\x20[root][]\x20path\x20if\n\
    \x20\x20\x20specified.\n\n\x20Example\x20of\x20a\x20simple\x20mixin:\n\n\
    \x20\x20\x20\x20\x20package\x20google.acl.v1;\n\x20\x20\x20\x20\x20servi\
    ce\x20AccessControl\x20{\n\x20\x20\x20\x20\x20\x20\x20//\x20Get\x20the\
    \x20underlying\x20ACL\x20object.\n\x20\x20\x20\x20\x20\x20\x20rpc\x20Get\
    Acl(GetAclRequest)\x20returns\x20(Acl)\x20{\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20option\x20(google.api.http).get\x20=\x20\"/v1/{resource=**}:\
    getAcl\";\n\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20}\n\n\x20\
    \x20\x20\x20\x20package\x20google.storage.v2;\n\x20\x20\x20\x20\x20servi\
    ce\x20Storage\x20{\n\x20\x20\x20\x20\x20\x20\x20rpc\x20GetAcl(GetAclRequ\
    est)\x20returns\x20(Acl);\n\n\x20\x20\x20\x20\x20\x20\x20//\x20Get\x20a\
    \x20data\x20record.\n\x20\x20\x20\x20\x20\x20\x20rpc\x20GetData(GetDataR\
    equest)\x20returns\x20(Data)\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20o\
    ption\x20(google.api.http).get\x20=\x20\"/v2/{resource=**}\";\n\x20\x20\
    \x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20}\n\n\x20Example\x20of\x20a\
    \x20mixin\x20configuration:\n\n\x20\x20\x20\x20\x20apis:\n\x20\x20\x20\
    \x20\x20-\x20name:\x20google.storage.v2.Storage\n\x20\x20\x20\x20\x20\
    \x20\x20mixins:\n\x20\x20\x20\x20\x20\x20\x20-\x20name:\x20google.acl.v1\
    .AccessControl\n\n\x20The\x20mixin\x20construct\x20implies\x20that\x20al\
    l\x20methods\x20in\x20`AccessControl`\x20are\n\x20also\x20declared\x20wi\
    th\x20same\x20name\x20and\x20request/response\x20types\x20in\n\x20`Stora\
    ge`.\x20A\x20documentation\x20generator\x20or\x20annotation\x20processor\
    \x20will\n\x20see\x20the\x20effective\x20`Storage.GetAcl`\x20method\x20a\
    fter\x20inherting\n\x20documentation\x20and\x20annotations\x20as\x20foll\
    ows:\n\n\x20\x20\x20\x20\x20service\x20Storage\x20{\n\x20\x20\x20\x20\
    \x20\x20\x20//\x20Get\x20the\x20underlying\x20ACL\x20object.\n\x20\x20\
    \x20\x20\x20\x20\x20rpc\x20GetAcl(GetAclRequest)\x20returns\x20(Acl)\x20\
    {\n\x20\x20\x20\x20\x20\x20\x20\x20\x20option\x20(google.api.http).get\
    \x20=\x20\"/v2/{resource=**}:getAcl\";\n\x20\x20\x20\x20\x20\x20\x20}\n\
    \x20\x20\x20\x20\x20\x20\x20...\n\x20\x20\x20\x20\x20}\n\n\x20Note\x20ho\
    w\x20the\x20version\x20in\x20the\x20path\x20pattern\x20changed\x20from\
    \x20`v1`\x20to\x20`v2`.\n\n\x20If\x20the\x20`root`\x20field\x20in\x20the\
    \x20mixin\x20is\x20specified,\x20it\x20should\x20be\x20a\n\x20relative\
    \x20path\x20under\x20which\x20inherited\x20HTTP\x20paths\x20are\x20place\
    d.\x20Example:\n\n\x20\x20\x20\x20\x20apis:\n\x20\x20\x20\x20\x20-\x20na\
    me:\x20google.storage.v2.Storage\n\x20\x20\x20\x20\x20\x20\x20mixins:\n\
    \x20\x20\x20\x20\x20\x20\x20-\x20name:\x20google.acl.v1.AccessControl\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20root:\x20acls\n\n\x20This\x20implies\
    \x20the\x20following\x20inherited\x20HTTP\x20annotation:\n\n\x20\x20\x20\
    \x20\x20service\x20Storage\x20{\n\x20\x20\x20\x20\x20\x20\x20//\x20Get\
    \x20the\x20underlying\x20ACL\x20object.\n\x20\x20\x20\x20\x20\x20\x20rpc\
    \x20GetAcl(GetAclRequest)\x20returns\x20(Acl)\x20{\n\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20option\x20(google.api.http).get\x20=\x20\"/v2/acls/{reso\
    urce=**}:getAcl\";\n\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20\
    \x20\x20...\n\x20\x20\x20\x20\x20}\n\n\x0b\n\x03\x04\x02\x01\x12\x04\xca\
    \x01\x08\r\nL\n\x04\x04\x02\x02\0\x12\x04\xcc\x01\x02\x12\x1a>\x20The\
    \x20fully\x20qualified\x20name\x20of\x20the\x20interface\x20which\x20is\
    \x20included.\n\n\r\n\x05\x04\x02\x02\0\x05\x12\x04\xcc\x01\x02\x08\n\r\
    \n\x05\x04\x02\x02\0\x01\x12\x04\xcc\x01\t\r\n\r\n\x05\x04\x02\x02\0\x03\
    \x12\x04\xcc\x01\x10\x11\n[\n\x04\x04\x02\x02\x01\x12\x04\xd0\x01\x02\
    \x12\x1aM\x20If\x20non-empty\x20specifies\x20a\x20path\x20under\x20which\
    \x20inherited\x20HTTP\x20paths\n\x20are\x20rooted.\n\n\r\n\x05\x04\x02\
    \x02\x01\x05\x12\x04\xd0\x01\x02\x08\n\r\n\x05\x04\x02\x02\x01\x01\x12\
    \x04\xd0\x01\t\r\n\r\n\x05\x04\x02\x02\x01\x03\x12\x04\xd0\x01\x10\x11b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::LazyV2<crate::descriptor::FileDescriptorProto> = crate::rt::LazyV2::INIT;
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> crate::reflect::FileDescriptor {
    static file_descriptor_lazy: crate::rt::LazyV2<crate::reflect::GeneratedFileDescriptor> = crate::rt::LazyV2::INIT;
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::new();
        deps.push(crate::well_known_types::file_descriptors::source_context());
        deps.push(crate::well_known_types::file_descriptors::type_pb());
        let mut messages = ::std::vec::Vec::new();
        messages.push(Api::generated_message_descriptor_data());
        messages.push(Method::generated_message_descriptor_data());
        messages.push(Mixin::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::new();
        crate::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    crate::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
